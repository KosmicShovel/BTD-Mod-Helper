using System.IO;

using Assets.Scripts.Utils;

using Exception = System.Exception;
using Object = Il2CppSystem.Object;

namespace BTD_Mod_Helper.Api;

public abstract partial class ModByteLoader {
    /// <summary>
    /// Generates a ModByteLoader class and corresponding .bytes file within the BloonsTD6 directory
    /// </summary>
    /// <param name="model">The model that you want to be able to be statically loaded from bytes</param>
    /// <param name="loaderFilePath">The absolute file path on your system where the .cs Loader file should end up</param>
    /// <param name="bytesFilePath">The absolute file path on your system where the bytes file should end up</param>
    /// <param name="nameSpace">If included, namespace to add to the loader cs file</param>
    public static void Generate<T>(T model, string loaderFilePath, string bytesFilePath, string nameSpace = null)
        where T : Object {
        Directory.CreateDirectory(ModHelper.ReplacedFilesDirectory);

        var unconvertedLoader = $"{FileIOUtil.sandboxRoot}UnconvertedLoader.cs";

        var loaderName = Path.GetFileNameWithoutExtension(loaderFilePath);
        var bytesFileName = Path.GetFileName(bytesFilePath);

        var flatFileCodeGen = new FlatFileCodeGen();

        var backupBytesPath = Path.Combine(ModHelper.ReplacedFilesDirectory, bytesFileName);

        try {
            if (File.Exists(bytesFileName)) {
                if (File.Exists(backupBytesPath)) File.Delete(backupBytesPath);
                File.Move(backupBytesPath, backupBytesPath);
            }

            flatFileCodeGen.Generate(model, bytesFilePath, unconvertedLoader);
        } catch (Exception e) {
            ModHelper.Error($"Failed to generate bytes {bytesFilePath}");
            ModHelper.Error(e);
            return;
        }

        ModHelper.Log($"Generated bytes {bytesFilePath}");

        var backupLoader = Path.Combine(ModHelper.ReplacedFilesDirectory, loaderName + ".cs");

        try {
            if (File.Exists(loaderFilePath)) {
                if (File.Exists(backupLoader)) File.Delete(backupLoader);
                File.Move(loaderFilePath, backupLoader);
            }

            ConvertLoader<T>(unconvertedLoader, loaderFilePath, loaderName, bytesFileName, nameSpace);
        } catch (Exception e) {
            ModHelper.Error($"Failed to generate ModByteLoader {loaderFilePath}");
            ModHelper.Error(e);
            return;
        }

        ModHelper.Log($"Generated ModByteLoader {loaderFilePath}");

        File.Delete(unconvertedLoader);
    }
}